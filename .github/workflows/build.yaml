# .github/workflows/build.yaml

name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/nicolasdiez/video2text

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-image:
    runs-on: ubuntu-latest
    needs: build
    environment: production   # exact name of the Environment in Github repo Settings
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: docker pull ${{ env.IMAGE_NAME }}:latest
      - name: Inspect image filesystem (quick)
        run: |
          echo "=== root ==="
          docker run --rm ${{ env.IMAGE_NAME }}:latest ls -la / || true
          echo "=== /app ==="
          docker run --rm ${{ env.IMAGE_NAME }}:latest sh -c "ls -la /app || true"
          echo "=== /app/src ==="
          docker run --rm ${{ env.IMAGE_NAME }}:latest sh -c "ls -la /app/src || true"
      - name: Check Python imports inside image
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:latest python - <<'PY'
          import importlib, sys
          spec = importlib.util.find_spec("src.main")
          print("spec src.main:", spec)
          try:
              import uvicorn
              print("uvicorn import: OK")
          except Exception as e:
              print("uvicorn import error:", type(e).__name__, e)
          PY
      - name: Debug comprobar si los secrets estÃ¡n disponibles
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "OPENAI_API_KEY: MISSING"
            exit 1
          else
            echo "OPENAI_API_KEY: PRESENT"
          fi
          if [ -z "${{ secrets.MONGO_HOST }}" ]; then
            echo "MONGO_HOST: MISSING"
            exit 1
          else
            echo "MONGO_HOST: PRESENT"
          fi
      - name: Create env file from GitHub Secrets
        run: |
          cat > .env.ci <<EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
          X_OAUTH1_API_KEY=${{ secrets.X_OAUTH1_API_KEY }}
          X_OAUTH1_API_SECRET=${{ secrets.X_OAUTH1_API_SECRET }}
          X_OAUTH2_API_BEARER_TOKEN=${{ secrets.X_OAUTH2_API_BEARER_TOKEN }}
          X_OAUTH2_CLIENT_ID=${{ secrets.X_OAUTH2_CLIENT_ID }}
          X_OAUTH2_CLIENT_SECRET=${{ secrets.X_OAUTH2_CLIENT_SECRET }}
          MONGO_USER=${{ secrets.MONGO_USER }}
          MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          MONGO_HOST=${{ secrets.MONGO_HOST }}
          MONGO_DB=${{ secrets.MONGO_DB }}
          DB_ENCRIPTION_SECRET_KEY=${{ secrets.DB_ENCRIPTION_SECRET_KEY }}
          EOF
        shell: bash
      - name: Run container foreground with env-file
        run: |
          echo "Running container with .env.ci"
          timeout 20s docker run --rm --name sut-fore -p 8000:8000 --env-file .env.ci ${{ env.IMAGE_NAME }}:latest || true
          echo "Foreground run finished"
      - name: Show last containers and logs for sut-fore
        run: |
          docker ps -a --filter "name=sut-fore" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          echo "=== logs sut-fore ==="
          docker logs sut-fore || true
      - name: Start container in background (if sut-fore exited early)
        run: |
          docker run -d --rm -p 8000:8000 --name sut ${{ env.IMAGE_NAME }}:latest || true
          sleep 2
          docker ps -a --filter "name=sut" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          echo "=== initial logs sut (tail 200) ==="
          docker logs --tail 200 sut || true
          echo "=== process list inside container ==="
          docker exec sut ps aux || true
          echo "=== listening sockets inside container ==="
          docker exec sut ss -ltnp || docker exec sut netstat -ltnp || true
      - name: Healthcheck (retries, show body head)
        run: |
          if docker ps --filter "name=sut" --format "{{.Names}}" | grep -q sut; then
            for i in $(seq 1 20); do
              echo "healthcheck attempt $i/20"
              status=$(curl -s -o /tmp/resp -w "%{http_code}" http://localhost:8000/docs || echo "000")
              echo "HTTP status: $status"
              if [ "$status" = "200" ]; then
                echo "OK: show first 400 chars of body:"
                head -c 400 /tmp/resp || true
                exit 0
              fi
              sleep 2
            done
            echo "Healthcheck failed, dumping container logs:"
            docker logs sut || true
            exit 1
          else
            echo "Container 'sut' is not running; dumping recent containers and exit 1"
            docker ps -a --filter "name=sut" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
            exit 1
          fi
      - name: Final container diagnostics (always)
        if: always()
        run: |
          echo "=== docker ps -a (filtered) ==="
          docker ps -a --filter "name=sut" --filter "name=sut-fore" --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          echo "=== docker logs sut (tail 500) ==="
          docker logs --tail 500 sut || true
          echo "=== docker logs sut-fore (tail 500) ==="
          docker logs --tail 500 sut-fore || true
      - name: Stop containers (cleanup)
        if: always()
        run: |
          docker stop sut sut-fore || true
          docker ps -a --filter "name=sut" --filter "name=sut-fore"

