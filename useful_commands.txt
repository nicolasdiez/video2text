# DEV
# create virtual environment
python -m venv video2text-venv

# activate virtual environment
source video2text-venv/Scripts/activate

# freeze project dependencies into file
python -m pip freeze > requirements.txt

# install project dependencies from file
source video2text-venv/Scripts/activate
pip install -r requirements.txt

# CI/CD
# build docker image (in project root, where Dockerfile is located)
docker build -t fastapi-app:local .

# run container with docker desktop
docker run -p 8000:8000 fastapi-app:local

# force pull latest remote image from GitHub Container Registry (GHCR) into local environment (before docker run)
docker pull ghcr.io/nicolasdiez/video2text:latest

# run remote image with docker desktop (validate by opening http://localhost:8000/docs)
docker run -p 8000:8000 ghcr.io/nicolasdiez/video2text:latest

# check the docker image I have locally
docker images ghcr.io/nicolasdiez/video2text

# remove the old local latest image
docker rmi ghcr.io/nicolasdiez/video2text:latest

# list all local images
docker images -a

# remove all local images
docker rmi -f $(docker images -aq)

# clean up all resources
docker system prune -a --volumes

# see docker resources being used
docker system df

# confirm version of ffmpeg installed
ffmpeg -version



# google cloud console (justfol..)
https://console.cloud.google.com/apis/

# auto-generated swagger by FastAPI (if shown then server is running properly)
http://localhost:8000/docs

# curl test for POST /pipelines/fetch-videos-generate-tweets/run/{channel_id}
curl -X POST "http://localhost:8000/pipelines/fetch-videos-generate-tweets/run/UCJQQVLyM6wtPleV4wFBK06g" -H "Content-Type: application/json" -d '{"prompt_file":"shortsentences-from-transcript.txt","max_videos":1,"max_sentences":2}'

# curl test for POST /pipelines/ingestion/run/{user_id}
curl -X POST "http://localhost:8000/pipelines/ingestion/run/64e8b0f3a1b2c3d4e5f67891" -H "Content-Type: application/json" -d '{"prompt_file":"shortsentences-from-transcript.txt","max_videos":1,"max_tweets":2}'

# curl test for POST /pipelines/publishing/run/{user_id}
curl -X POST "http://localhost:8000/pipelines/publishing/run/64e8b0f3a1b2c3d4e5f67891" -H "Content-Type: application/json" -d '{"max_tweets_to_fetch": 10, "max_tweets_to_publish": 5}'

